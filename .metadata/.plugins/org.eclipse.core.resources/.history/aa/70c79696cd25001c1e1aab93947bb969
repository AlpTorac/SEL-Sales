package external.connection.pingpong;

import java.time.temporal.ChronoUnit;
import java.util.concurrent.ExecutorService;

import external.connection.IConnection;
import external.connection.outgoing.BasicMessageSender;
import external.connection.timeout.FixTimeoutStrategy;
import external.message.IMessage;
import external.message.Message;
import external.message.MessageContext;

public class StandardPingPong extends PingPong {
	public StandardPingPong(IConnection conn, ExecutorService es) {
		super(conn, new BasicMessageSender(), new FixTimeoutStrategy(1000, ChronoUnit.MILLIS), es, 10);
	}
	
	@Override
	public boolean start() {
		return true;
	}
	
	protected IMessage generatePingPongMessage() {
		return null;
	}
	
	protected void sendPingPongMessage() {
		
	}
	
	protected boolean sendPingPongMessageAndStartTimer() {
		return true;
	}
	
	protected void initTimeoutTimer() {

	}
	
	protected void startTimeoutTimer() {

	}
	
	protected void resetTimeoutTimer() {

	}
	
	protected void resetResendCount() {

	}
	
	protected void resendPingPongMessage() {

	}
	
	protected void increaseResendCount() {

	}
	
	@Override
	public void receiveResponse(IMessage message) {

	}
	
	@Override
	public void timeout() {

	}
	
	@Override
	public void close() {

	}
	
	@Override
	public boolean isRunning() {
		return true;
	}
	
	@Override
	public int getRemainingResendTries() {
		return 1;
	}
}
