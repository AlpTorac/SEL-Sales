@startuml DBCA
package Model {
    interface IModel {
        +notifyObservers()
    }

    interface IObserver {
        +update()
    }

    Abstract Class DishMenuProvider {
        -{abstract} SomeDataStructure getDishMenuData()
        -{abstract} DishMenu parseDishMenuData()
        +DishMenu getDishMenu()
    }

    Class Order {
        -Date date
        -List<OrderItem> orderedItems
    }

    Class OrderItem {
        -Dish dish
        -BigDecimal amount
        +String toString()
    }

    Class OrderManager {
        -List<Order> orders
        -void backupOrders()
        +void sendOrders()
    }

    Class Dish {
        -String dishID
        +String toString()
    }

    Class DishMenu {
        -Set<Dish> dishSet
        +boolean addDish(Dish)
        +boolean removeDish(Dish)
        +boolean editDish(Dish old, Dish new)
        +Dish getDish(String dishID)
    }

    Class HardCodedDishMenuProvider extends DishMenuProvider {
        -String[] dishIDs
    }

    Class ServerDishMenuProvider extends DishMenuProvider {
        
    }

    class Model implements IModel {
        -DishMenu dishMenu = SomeDishMenuProvider().getDishMenu()
    }

    note right of Model::dishMenu
    Menu elements
    end note

    OrderItem ..+ Order
}

package Controller {
    interface IController {

    }

    enum Event {

    }

    interface IEventShooter {
        -{static} EventManager eventManager
        +default triggerEvent(Event)
    }
    note top of IEventShooter
    Implemented by classes that trigger events
    in View.
    end note

    interface IEventHandler {
        +handleEvent()
    }
    note top of IEventHandler
    Implemented by classes that handle events
    in Controller.
    end note

    class ConcreteEventHandler implements IEventHandler {

    }

    class Controller implements IController {
        -IModel model
        -EventManager eventManager
    }

    class EventManager {
        -HashMap<Event, IEventHandler> actionMapper
    }
    note top of EventManager
    Initialise the map in Controller.
    end note

    EventManager --> "*" IEventHandler
    IEventShooter "triggers event" --> "handles events" IEventHandler
}

package View {
    abstract class EditPart {
        -EventListener listener
        -Component component
        #EditPart(EventListener listener)
        +attach(Component)
        +dettach()
    }
    note bottom of EditPart
    Listeners associated with the UI Component.
    Subclasses change the components based on
    actions performed (only within View package,
    no manipulation of Controller or Model)
    end note

    abstract class EventShooterEditPart extends EditPart implements IEventShooter {

    }
    note bottom of EventShooterEditPart
    Listeners associated with the UI Component.
    Subclasses change the components based on
    actions performed (only within View package,
    no manipulation of Controller or Model) and
    fire events.
    end note

    class UIComponent {
        -List<EditPart> editParts
        +EditPart[] getEditParts()
        +boolean addEditPart(EditPart)
        +boolean removeEditPart(EditPart)
        +boolean removeAllEditParts()
    }

    interface IView {

    }

    class View implements IView, IObserver {
        -IController controller
        -List<UIComponent> components
    }

    UIComponent *--> "*" EditPart
}
@enduml